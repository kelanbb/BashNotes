COMMANDS

touch filename // create a file, manipulate timestamp
  man touch, then /time can let you find time commands for touch
  touch -t 200507041200 filename // change file time (modified?) to 4 Jul 2005 12:00
  touch A1 A2 A3 creates 3 files
file filename //see what type of file something is, if nothing it int will show empty
rm //remove file, rmdir //remove dir,    rm A* removes all files that start with A
echo ~ //shows what home dir is
whoami //current user
hostname //name of device logged into
mv, cp  // move, copy
ln -s file newfileref// create links to files, like shortcut, type is a symbolic link, work anywhere
ln file hardlink // greates hard link, will have same contents of file even without original file, only work if on same hard drive
locate //search database for stuff thats already installed
whereis man // look for filepaths that have man
| is pipe, takes whats on left and put into right
named pipe is a pipe that stays on the system, seperate type of file
find ---
  find -name bad //for for case sensitive file with name, will look for exact string unless use *
  find -iname filename // is not case sensitive
  find / -name bad //can give file path to start searching
  find -type (f for file, d for dir, l for sym link, p for named pipe (| is pipe)|| options) -iname bad* // can search for file type
  find -mtime 2//searches for anything modiified timstamp in 2 days
  find -empty //find empty files (in current dir)
  find -e //find executable files
  find / -maxdepth 2 // how many sub directories deep will look (this ex will look at root and then down 2 directoreis)
  when you find stuff, you can do stuff with it...
    find /tmo name core -type f -print | xargs /bin/rm (found in man find)
    find ./ -iname "*.txt" -print // will find any txt file and prints files names out (will print names even wo print)
    find ./ -iname "*.txt" -printf "%inode %file\n" //inode is physial location(followed by 'node', where it is stored. This code prints inode number followed by the filename followed by 'ile'
      same as : find ./ -iname "*.txt" -printf "%i %f\n"
    find ./ -iname "*.txt" -exec...........................???
    find ./ -type d // finds any dir in current dir
    find ./ -type d -exec ls -l {} \; //{} is output of find command, like format for python. exerc will run other code / things. NEED \; to end line in the code
    
    
  how much wood could a wood chuck chuck if a wood chuck could chuck wood?
  
mkfifo pipetest creates a new named pipe, dont store anything, only passes through memory
to use a pipe
  cat chadow | grep student // will cat shadow and look for student, if found then will print line
  named pipe can be used to acess multiple
  pipe is only in terminal

brace expansion (execute miltiple lines of code at once):
 touch ./find/{1..10}.txt // within the find fir in the current dir, create a 1.txt, 2.txt....9.txt,10.txt
 touch ./find=/{empty,test,stuff}.txt // same as aboce except makes 3 files with the names in the braces
 find ./find/ ! -name *.txt // find anything in find that is not a .txt
 find ./find/ ! -name *.sh -name *txt
 find ./find/ ! -name #.sh -name 1* // anything that isnt a .sh file and starts with a 1
 
 grep // searches for patterns and prints it (egrep is extended grep)
-i option ignore case
-v inverse
cat /etc/passwd | egrep /home/ // shows every line with '/home/'
car /etc/passwd | egrap -o /home/ //will onpy print your argument ('/home/')
cat /etc/passwd | egrep -o "/home.*" // will print out the test after 'home/ as well as home in for the text in the line
cat /etc/passwd | egrep ":[0-9]{5}:" // finds each time there are 5 numbers ina  row surrounded by colons
cat /etc/passwd | egrep -n home // I duno, sometrhing about remembering or pasing the results or something
-C prints lines above and below match
  cat /etc/shadow | grep /bash -C2
-A only prints lines after
  cat /etc/shadow | egrap /bash -A //prints 2 lines after the results as well
-B prints lines before


cut. only affects output by default------------
  tail /etc/passwd | cut -d: -f1//cut -d: sets delimiter to :, f1 sets that result to f1
  tail /etc/passwd | cut -d: -f2
  tail /etc/passwd | cut -d: -f2-
  tail /etc/passwd | cut -d- -f1- -s  //look through every other field and only find matching and print that line, cut helps filter a search form something
      -s requires delimiter to be in that lin, wo s it will cut only if in line...
      
& ---- sends process to background
&& --- logical and
; ---- same as hitting enter and starting enw line , can beused to enter multiple lines
\ ---- opposite of semicolon, lets you continue typeing command on next line
! ---- logical not
|| --- logical or
() --- presidense operator, group thngs
> ---- redirector, take output and sent it somewhere, most commonly used for files, overrides
  echo "testz' > file1.txt
>> --- append



file streams (file in 0 (std in), file out 1 (std out), file error 2 (std err))-------------------
  find /* 2>/dev/null | grep "Permission denied" //take anything that has an error, aka "Permission denied", and send to /dev/null, remember its looking for a std err since 2
  find /* 1>/dev/null 2> debug.log // way to save std output and std output into 2 standard files
  
  
  


CONST VAR
//sotred in usr file
$HOME

FILES
.bashrc // what current user used.....
  alias
  downloaded custom things...
usr/bin //usually can run
usr/share //usually shared between users

BLUE = dir
GRAY = file
WHITE = sytmbollic link
GRAY =  = hardlink
