COMMANDS
locate (use update before?)


awk # utulity for patern scanning (in a file), 
***
  see if contains lines with whatever pattern / specifications. 
  Scan a file line by line, 
  split into differnt fields, 
  match lines,
  find unmatch stuff,
  change format or fertain file
awk '{print}' coffee.txt // prints every line of coffee.txt
awk '/coffee/ {print}' coffee/txt // prints every line that has /coffee/ string
awk '{print NR,$0}' coffee.txt // prints coffe.txt with lines numbers
  $0 represents whole line.....???
  NR keeps cirrent count of current number for whatever input is, in this case it's $0, whole line numbers
awk 'NR == 3, NR == 8 {print NR,$0}' coffee.txt  //ptints lines 3 to 8 in NR and shows number lines

tail /etc/passwd | awk -F: '{print $NF}'  //prints last field of etc/passed, fields deliminated by :
  $NF if last field
  -F is delimiter, default is space
tail /etc/passwd | awk -F: '{print $1,$5}' //same as above except prints field 1 and 5 
tail /etc/passwd | awk -F: 'BEGIN {OFS="#"} {print $1,$2}'
tail /etc/passwd | awk 'BEGIN {FS="#"} {print $1,$5}'
  basically alternate way to do line 23


sort #used to sort
  arrage in particulat order
  options to sort numberical, default alphabetical
  if number and letter, will sort by number then letter, uppercasfe before lower
sort befereges.txt //soerts special>numerical>upper>lower
sort -o beverages2.txt beverages.txt // sort to file, <destination> <source>, sort beverages and save to beverages2
sort -r beverages.txt //sort reverse
sort -n beverages.txt //sort with numbers last instead of first
  -u sort duplicate
  -m sort in month order if months in file
sort -nr beverages.txt // sorts with numbers at end in reverse
sort -k 2 beverages.txt sort by 2nd coumn (2nd word, deliminated by space by default), if none then will be on top of sort
sort -k 3,3 -k1,1 coffee.txt //will sort 3rd colim, then will sort by forst column ////////////////////////////?>?????????????????????????/

sed #find, replace, ins, delete content in file without changinging modified time...?____________________________________---------------------------
sed 's/coffee/Coffee/' coffee.txt // replaces first instance of 'coffee' with 'Coffee' in coffe.txt
sed 's/Coffee/coffee/g' coffee.txt //replaces all (global) instances of Coffee with coffee
sed '5 s/Coffee/coffee' coffee.txt //supposed to only aply to 5th line
sed '$d' tea.txt //deletes (last) line in output
sed '3,$d' coffee.txt  // deletes everything after 2md line, dletes 3rd line and everything after
sed '3d' coffee.txt /deletes only third line

echo "Welcome To The Coffee House" | sed 's/\(\b[A-Z]\)/\(\1\)/g'
  outputs : (W)elcome (T)o (T)he (C)offee (H)ouse
  -i hide the string
  -e allows scripting


unique # find repeates lines, patterns
 -c is how many times a thing was repeated
 sort coffee.txt | uniq -c // gives counds (how many times each line is said / repeated) in coffe.txt
 -d shows repeated lines
 -D shows how many times each repeated line is said.....???
 student@lin-ops:~/Bash2$ sort coffee.txt | uniq -c
      1  I like coffee in the morning
      1  better than Coffee
      1  better than tea
      1  coffee is good
      2  i love coffee
      1  it gives energy
      1  love coffee
student@lin-ops:~/Bash2$ sort coffee.txt | uniq -d
 i love coffee
student@lin-ops:~/Bash2$ sort coffee.txt | uniq -D
 i love coffee
 i love coffee

 sort coffee.txt | uniq -u // shows only unique lines
 -i makes not case sensative
 

 alias -------------------------------------------------------------------
  helps with repeated actions
 to set an alias:
  alias <name>='<name of what command actually is>' // will only be temprry, in the terminal
 alias -p shows the alias list
 alias ls ='ls -al --color=auto'
 To use a cmmand like normal / ignore alias:
  \<command>
 unalias <alias name>//remove alias
 
  
Conditionals: -----------------------------------------------------------------------------------------------------------------------------------

if statements:
    1 #!/bin/bash
  2 
  3 if [[ conditions ]]; then
  4    commans
  5 elif [[ conditions ]]; then
  6    commands
  7 else
  8    commands
  9 fi
== (num and string), -eq(num only), -ne, !=, < only words for strings, -gt, -lt, -ge, -le work wit num and string
